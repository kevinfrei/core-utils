{"version":3,"sources":["../src/FTON.js"],"names":["typecheck","x","undefined","Array","isArray","map","Map","Set","o","k","Error","replacer","key","value","originalObject","dataType","dataValue","reviver","hasOwnProperty","val","parse","input","JSON","stringify","arrayOfStrings","filter","elem","module","exports"],"mappings":"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","sourcesContent":["//@flow\n//@format\n\nimport type { FTONData, FTONObject, FTONArray } from './index';\n\nconst typecheck = (x: mixed): FTONData => {\n  if (\n    x === null ||\n    typeof x === 'string' ||\n    typeof x === 'number' ||\n    typeof x === 'boolean'\n  ) {\n    return x;\n  }\n\n  if (x === undefined) {\n    return null;\n  }\n\n  if (Array.isArray(x)) {\n    return x.map(typecheck);\n  }\n\n  if (typeof x === 'object') {\n    if (x instanceof Map || x instanceof Set) {\n      return x;\n    }\n    let o: FTONObject = {};\n    for (let k in x) {\n      o[k] = typecheck(x[k]);\n    }\n    return o;\n  }\n\n  throw new Error('Invalid FTON');\n};\n\nfunction replacer(key: mixed, value: mixed): mixed {\n  const originalObject: mixed = this[key];\n  if (originalObject instanceof Map) {\n    return {\n      dataType: 'Map',\n      dataValue: [...originalObject],\n    };\n  } else if (originalObject instanceof Set) {\n    return {\n      dataType: 'Set',\n      dataValue: [...originalObject],\n    };\n  } else {\n    return value;\n  }\n}\n\nfunction reviver(key: mixed, value: mixed): mixed {\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.hasOwnProperty('dataType') &&\n    value.hasOwnProperty('dataValue')\n  ) {\n    const val: mixed = value.dataValue;\n    if (Array.isArray(val)) {\n      if (value.dataType === 'Map') {\n        return new Map(val);\n      } else if (value.dataType === 'Set') {\n        return new Set(val);\n      }\n    }\n  }\n  return value;\n}\nconst parse = (input: string): FTONData => {\n  return typecheck(JSON.parse(input, reviver));\n};\n\nconst stringify = (input: FTONData): string => {\n  return JSON.stringify(input, replacer);\n};\n\nconst arrayOfStrings = (input: FTONData): ?Array<string> => {\n  if (input && Array.isArray(input)) {\n    return input.filter(elem => typeof elem === 'string');\n  }\n};\n\nmodule.exports = {\n  parse,\n  stringify,\n  typecheck,\n  arrayOfStrings,\n};\n"],"file":"FTON.js"}